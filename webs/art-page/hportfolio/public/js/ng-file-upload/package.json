{
  "name": "ng-file-upload",
  "version": "7.0.10",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-concat": "^0.5.1",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-contrib-uglify": "^0.8.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-text-replace": "~0.3.12",
    "grunt-git": "~0.2.14",
    "grunt-serve": "^0.1.6",
    "jshint-stylish": "^1.0.0",
    "load-grunt-tasks": "^3.1.0"
  },
  "description": "An AngularJS directive for file upload using HTML5 with FileAPI polyfill for unsupported browsers",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/danialfarid/ng-file-upload.git"
  },
  "keywords": [
    "angularjs",
    "ng-file-upload",
    "file-upload",
    "javascript"
  ],
  "author": {
    "name": "danial.farid@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/danialfarid/ng-file-upload/issues"
  },
  "homepage": "https://github.com/danialfarid/ng-file-upload",
  "readme": "[![npm version](https://badge.fury.io/js/ng-file-upload.svg)](http://badge.fury.io/js/ng-file-upload)\n[![Downloads](http://img.shields.io/npm/dm/ng-file-upload.svg)](https://npmjs.org/package/ng-file-upload)\n[![Issue Stats](http://issuestats.com/github/danialfarid/ng-file-upload/badge/pr)](http://issuestats.com/github/danialfarid/ng-file-upload)\n[![Issue Stats](http://issuestats.com/github/danialfarid/ng-file-upload/badge/issue)](http://issuestats.com/github/danialfarid/ng-file-upload)<br/>\n[![PayPayl donate button](https://img.shields.io/badge/paypal-donate-yellow.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=danial%2efarid%40gmail%2ecom&lc=CA&item_name=ng%2dfile%2dupload&item_number=ng%2dfile%2dupload&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted)\n[![Gratipay donate button](https://img.shields.io/gratipay/danialfarid.svg?style=social&label=Donate)](http://img.shields.io/gratipay/danialfarid)\n\nng-file-upload\n===================\n\nLightweight Angular directive to upload files.\n\n**See the <a href=\"https://angular-file-upload.appspot.com/\" target=\"_blank\">DEMO</a> page**.<br/>\n\n**Migration notes**: [version 3.0.x](https://github.com/danialfarid/ng-file-upload/releases/tag/3.0.0) [version 3.1.x](https://github.com/danialfarid/ng-file-upload/releases/tag/3.1.0) [version 3.2.x](https://github.com/danialfarid/ng-file-upload/releases/tag/3.2.3) [version 4.x.x](https://github.com/danialfarid/ng-file-upload/releases/tag/4.0.0) [version 5.x.x](https://github.com/danialfarid/ng-file-upload/releases/tag/5.0.0) [version 6.x.x](https://github.com/danialfarid/ng-file-upload/releases/tag/6.0.0) [version 6.2.x](https://github.com/danialfarid/ng-file-upload/releases/tag/6.2.0) [version 7.x.x](https://github.com/danialfarid/ng-file-upload/releases/tag/7.0.0)\n\n\nAsk questions on [StackOverflow](http://stackoverflow.com/) under the [ng-file-upload](http://stackoverflow.com/tags/ng-file-upload/) tag.<br/>\nFor bug report or feature request please search through existing [issues](https://github.com/danialfarid/ng-file-upload/issues) first then open a new one  [here](https://github.com/danialfarid/ng-file-upload/issues/new). For faster response provide steps to reprodce/versions with a jsfiddle from [here](http://jsfiddle.net/ew4jakn5/). Need paid support contact [me](mailto:danial.farid@gmail.com).<br/>\nContributions are always welcome. If you like this plugin give it a thumbs up at [ngmodules](http://ngmodules.org/modules/ng-file-upload).\n\n\nTable of Content:\n* [Features](#features)\n* [Install](#install) ([Manual](#manual), [Bower](#bower), [NuGet](#nuget), [NPM](#npm))\n* [Usage](#usage)\n* [Old Browsers](#old_browsers)\n* [Server Side](#server) \n  * [Samples](#server) ([Java](#java), [Spring](#spring), [Node.js](#node), [Rails](#rails), [PHP](#php), [.Net](#net))\n  * [CORS](#cors)\n  * [Amazon S3 Upload](#s3)\n\n##<a name=\"features\"></a> Features\n* file upload progress, cancel/abort\n* file drag and drop and paste images\n* abort/cancel upload\n* validation on file type/size, image width/height, video/audio duration and `ng-required` support.\n* show preview of selected images/audio/videos\n* supports CORS and direct upload of file's binary data using `Upload.$http()`\n* plenty of sample server side code, available on nuget\n* on demand flash [FileAPI](https://github.com/mailru/FileAPI) shim loading no extra load for html5 browsers.\n* HTML5 FileReader shim\n\n##<a name=\"install\"></a> Install\n\n* <a name=\"manual\"></a>**Manual**: download latest from [here](https://github.com/danialfarid/ng-file-upload-bower/releases/latest)\n* <a name=\"bower\"></a>**Bower**: \n  * `bower install ng-file-upload-shim --save`(for non html5 suppport)\n  * `bower install ng-file-upload --save`\n* <a name=\"nuget\"></a>**NuGet**: `PM> Install-Package angular-file-upload` (thanks to [Georgios Diamantopoulos](https://github.com/georgiosd))\n* <a name=\"npm\"></a>**NPM**: `npm install ng-file-upload`\n```html\n<script src=\"angular(.min).js\"></script>\n<script src=\"ng-file-upload-shim(.min).js\"></script> <!-- for no html5 browsers support -->\n<script src=\"ng-file-upload(.min).js\"></script> \n```\n\n##<a name=\"usage\"></a> Usage\n\n###Samples:\n* Upload with form submit and validations: [http://jsfiddle.net/danialfarid/1m6fn6re/](http://jsfiddle.net/danialfarid/1m6fn6re/)\n* Upload multiple files on file select: \n[http://jsfiddle.net/danialfarid/2vq88rfs/2/](http://jsfiddle.net/danialfarid/2vq88rfs/2/)\n* Upload single file on file select: \n[http://jsfiddle.net/danialfarid/0mz6ff9o/3/](http://jsfiddle.net/danialfarid/0mz6ff9o/3/)\n* Drop and upload on watch: \n[http://jsfiddle.net/danialfarid/s8kc7wg0/1](http://jsfiddle.net/danialfarid/s8kc7wg0/1)\n```html\n<script src=\"angular.min.js\"></script>\n<!-- shim is needed to support non-HTML5 FormData browsers (IE8-9)-->\n<script src=\"ng-file-upload-shim.min.js\"></script> \n<script src=\"ng-file-upload.min.js\"></script> \n\n<form ng-app=\"fileUpload\" ng-controller=\"MyCtrl\" name=\"form\">\n    watching model:\n  <div class=\"button\" ngf-select ng-model=\"file\">Upload using model $watch</div>\n  <div class=\"button\" ngf-select ng-model=\"files\" ngf-multiple=\"true\" ngf-pattern=\"'image/*\" accept=\"image/*\">Upload multiple images using model $watch</div>\n  <div class=\"button\" ngf-select ngf-change=\"upload($file)\">Upload on file change</div>\n  <div class=\"button\" ngf-select ngf-change=\"upload($files)\" ngf-multiple=\"true\" ngf-max-size=\"'2MB'\">Upload multiple with size limitation</div>\n  Drop File:\n  <div ngf-drop ng-model=\"files\" class=\"drop-box\" \n    ngf-drag-over-class=\"dragover\" ngf-multiple=\"true\" ngf-allow-dir=\"true\"\n    ngf-pattern=\"'image/*,application/pdf'\">Drop Images or PDFs files here</div>\n  <div ngf-no-file-drop>File Drag/Drop is not supported for this browser</div>\n\n  Image thumbnail: <img ngf-src=\"file || '/thumb.jpg'\">\n  Audio preview: <audio controls ngf-src=\"file\"></audio>\n  Video preview: <video controls ngf-src=\"file\"></video>\n</div>\n```\nJavascript code:\n```js\n//inject directives and services.\nvar app = angular.module('fileUpload', ['ngFileUpload']);\n\napp.controller('MyCtrl', ['$scope', 'Upload', function ($scope, Upload) {\n    $scope.$watch('file', function (file) {\n      if (!file.$error) {\n        $scope.upload($scope.file);\n      }\n    });\n    \n    /* optional: set default directive values */\n    //Upload.setDefaults( {ngf-keep:false ngf-accept:'image/*', ...} );\n    \n    $scope.upload = function (file) {\n        Upload.upload({\n            url: 'upload/url',\n            fields: {'username': $scope.username},\n            file: file\n        }).progress(function (evt) {\n            var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n            console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);\n        }).success(function (data, status, headers, config) {\n            console.log('file ' + config.file.name + 'uploaded. Response: ' + data);\n        }).error(function (data, status, headers, config) {\n            console.log('error status: ' + status);\n        })\n    };\n}]);\n```\n\n### Full reference\n\n#### File select\n\n```html\n<button|div|input type=\"file\"|ngf-select|...\n  *ngf-select= \"upload($files, $file, $event)\" // function same as ngf-change\n  ng-model=\"myFiles\" // binds the selected file or files to the scope model \n                     // could be an array or single file depending on ngf-multiple and ngf-keep values.\n  ng-disabled=\"boolean\" // disables this element\n  ngf-select-disabled=\"boolean\" // default true, disables file select on this element\n  ngf-change=\"upload($files, $file, $event)\" // called when files are selected or cleared\n  ngf-multiple=\"boolean\" // default false, allows selecting multiple files\n  ngf-capture=\"'camera'\" or \"'other'\" // allows mobile devices to capture using camera\n  accept=\"image/*\" // standard HTML accept attribute for the browser specific popup window filtering\n  ngf-keep=\"boolean\" // default false, keep the previous ng-model files and append the new files\n  ngf-keep-distinct=\"boolean\" // default false, if ngf-keep is set, removes duplicate selected files\n\n  //validations: \n  ngf-pattern=\"'.pdf,.jpg,video/*'\" // comma separated wildcard to filter file names and types allowed\n              // validate error name: pattern\n  ngf-min-size, ngf-max-size=\"100\" in bytes or \"'10KB'\" or \"'10MB'\" or \"'10GB'\"\n              // validate as form.file.$error.maxSize=true and file.$error='maxSize'\n  ngf-min-heigh, ngf-max-heigh, ngf-min-width, ngf-max-width=\"1000\" in pixels\n              // validate error name: maxHeight\n  ngf-min-duration, ngf-max-duration=\"100.5\" in seconds or \"'10s'\" or \"'10m'\" or \"'10h'\"\n              // validate error name: maxDuration\n  ngf-validate=\"{size: {min: 10, max: '20MB'}, width: {min: 100, max:10000}, \n                height: {min: 100, max: 300}, duration: {min: '10s', max: '5m'}, pattern: '.jpg'}\"\n                shorthand form for above validations in one place.\n  ngf-validate-fn=\"validate($file)\" // custom validation function, return boolean or string containing the error.\n              // validate error name: validateFn\n  ngf-validate-async-fn=\"validate($file)\" // custom validation function, return a promise that resolve to\n              // boolean or string containing the error. validate error name: validateAsyncFn\n  ngf-validate-force=\"boolean\" // default false, if true file will be rejected if the dimension or duration \n              // values for validations cannot be calculated for example image cannot load or unsupported video by browser\n  ngf-validate-later=\"boolean\" // default false, if true model will be set and change will be called before validation\n\n>Upload</button>\n```\n#### File drop\n```html\nAll attributes are optional except ngf-drop and one of ng-model or ngf-change.\n<div|button|ngf-drop|...\n  *ngf-drop= \"upload($files, $file, $event)\" // function same as ngf-change\n  ng-model=\"myFiles\" // binds the dropped file or files to the scope model \n                     // could be an array or single file depending on ngf-multiple and ngf-keep values.\n  ng-disabled=\"boolean\" // disables this element\n  ngf-drop-disabled=\"boolean\" // default true, disables file drop on this element\n  ngf-change=\"fileDropped($files, $file, $event)\" //called when files being dropped\n  ngf-multiple=\"boolean\" // default false, allows selecting multiple files.\n  ngf-allow-dir=\"boolean\" // default true, allow dropping files only for Chrome webkit browser\n  ngf-drag-over-class=\"{accept:'acceptClass', reject:'rejectClass', delay:100}\" or \"myDragOverClass\" or\n                    \"calcDragOverClass($event)\" \n              // drag over css class behaviour. could be a string, a function returning class name \n              // or a json object {accept: 'c1', reject: 'c2', delay:10}. default \"dragover\".\n              // accept/reject class only works in Chrome validating only the file mime type\n              // against ngf-pattern\n  ngf-drop-available=\"dropSupported\" // set the value of scope model to true or false based on file\n                                     // drag&drop support for this browser\n  ngf-stop-propagation=\"boolean\" // default false, whether to propagate drag/drop events.\n  ngf-hide-on-drop-not-available=\"boolean\" // default false, hides element if file drag&drop is not\n  \n  //validations:\n  same as ngf-select see above\nsupported\n>\nDrop files here\n</div>\n\n<div|... ngf-no-file-drop>File Drag/drop is not supported</div>\n```\n\n#### File preview\n```html\n<img|audio|video \n  ngf-src=\"file\" //To preview the selected file, sets src attribute to the file data url.\n  ngf-background=\"file\" //sets background-image style to the file data url.\n  ngf-no-object-url=\"true or false\" // see #887 to force base64 url generation instead of object url. Default false\n> \n```\n\n#### Upload service:\n```js\nvar upload = Upload.upload({\n  *url: 'server/upload/url', // upload.php script, node.js route, or servlet url\n  *file: file,  // single file or an array of files (array is for html5 only)\n  method: 'POST' or 'PUT'(html5), default POST,\n  headers: {'Authorization': 'xxx'}, // only for html5\n  fileName: 'doc.jpg' or ['1.jpg', '2.jpg', ...], // to modify the name of the file(s)\n  /* \n  file formData name ('Content-Disposition'), server side request file parameter name could be\n  an array  of names for multiple files (html5). Default is 'file' */\n  fileFormDataName: 'myFile' or ['file[0]', 'file[1]', ...], \n  /* \n  map of extra form data fields to send along with file. each field will be sent as a form field.\n  The values are converted to json string or jsob blob or nested form depending on 'sendFieldsAs' option. */\n  fields: {key: $scope.myValue, ...},\n  /*\n  default is 'json', sends each field as json string plain text content type, 'json-blob' sends object fields \n  as a blob object with content type 'application/json', 'form' sends fields as nested form fields. see #784 */\n  sendFieldsAs: json|json-blob|form,\n  /* customize how data is added to the formData. See #40#issuecomment-28612000 for sample code. */\n  formDataAppender: function(formData, key, val){},\n  /*\n  data will be sent as a separate form data field called \"data\".*/\n  data: {}. \n  withCredentials: true|false,\n  ... and all other angular $http() options could be used here.\n}).progress(function(evt) {\n  console.log('progress: ' + parseInt(100.0 * evt.loaded / evt.total) + '% file :'+ evt.config.file.name);\n}).success(function(data, status, headers, config) {\n  // file is uploaded successfully\n  console.log('file ' + config.file.name + 'is uploaded successfully. Response: ' + data);\n}).error(function(data, status, headers, config) {\n  // handle error\n}).xhr(function(xhr){\n  //access or attach event listeners to the underlying XMLHttpRequest\n  xhr.upload.addEventListener(...) \n});\n/* return $http promise then,catch or finally. \nNote that this promise does NOT have progress, abort or xhr functions */\nvar promise = upload.then(success, error, progress);\n              upload.catch(errorCallback);\n              upload.finally(callback, notifyCallback);\n\n/* cancel/abort the upload in progress. */\nupload.abort();\n\n/* alternative way of uploading, send the file binary with the file's content-type.\n   Could be used to upload files to CouchDB, imgur, etc... html5 FileReader is needed. \n   It could also be used to enable progress for regualr angular $http() post/put requests.\n*/\nUpload.http({\n  url: '/server/upload/url',\n  headers : {\n    'Content-Type': file.type\n  },\n  data: file\n})\n\n/* Set the default values for ngf-select and ngf-drop directives*/\nUpload.setDefaults({ngfMinSize: 20000, ngfMaxSize:20000000, ...})\n\n/* Convert the file to base64 data url*/\nUpload.dataUrl(file, disallowObjectUrl).then(function(url){...});\n\n/* Get image file dimensions*/\nUpload.imageDimensions(file).then(function(dimensions){console.log(dimensions.widht, dimensions.height);});\n\n/* Geet audio/video duration*/\nUpload.mediaDuration(file).then(function(durationInSeconds){...});\n```\n**ng-model**\nThe model value will be a single file instead of an array if all of the followings are true:\n  * `ngf-multiple` is not set or is resolved to false.\n  * `multiple` attribute is not set on the element \n  * `ngf-keep` is not set or is resolved to false.\n\n**validation**\nWhen any of the validation directives specified the form validation will take place and \nyou can access the value of the validation using `myForm.myFileInputName.$error.<validate error name>` \nfor example `form.file.$error.pattern`. \nIf multiple file selection is allowed you can find the error of each individual file \nwith `file.$error` and description of it `file.$errorParam`. \nSo before uploading you can check if the file is valid by `!file.$error`.\n\n**Upload multiple files**: Only for HTML5 FormData browsers (not IE8-9) if you pass an array of files to `file` option it will upload all of them together in one request. In this case the `fileFormDataName` could be an array of names or a single string. For Rails or depending on your server append square brackets to the end (i.e. `file[]`). \nNon-html5 browsers due to flash limitation will still upload array of files one by one in a separate request. You should iterate over files and send them one by one if you want cross browser solution.\n\n**Upload.http()**:\nThis is equivalent to angular $http() but allow you to listen to the progress event for HTML5 browsers.\n\n**drag and drop styling**: For file drag and drop, `ngf-drag-over-class` could be used to style the drop zone. It can be a function that returns a class name based on the $event. Default is \"dragover\" string.\nOnly in chrome It could be a json object `{accept: 'a', 'reject': 'r', delay: 10}` that specify the class name for the accepted or rejected drag overs. The validation `ngf-accept` could only check the file type since that is the only property of the file that is reported by the browser on drag. So you cannot validate the file size or name on drag. There is also some limitation on some file types which are not reported by Chrome. \n`delay` param is there to fix css3 transition issues from dragging over/out/over [#277](https://github.com/danialfarid/angular-file-upload/issues/277).\n\n**Upload.setDefaults()**:\nIf you have many file selects or drops you can set the default values for the directives by calling `Upload.setDefaults(options)`. `options` would be a json object with directive names in camelcase and their default values. \n\n##<a name=\"old_browsers\"></a> Old browsers\n\nFor browsers not supporting HTML5 FormData (IE8, IE9, ...) [FileAPI](https://github.com/mailru/FileAPI) module is used. \n**Note**: You need Flash installed on your browser since `FileAPI` uses Flash to upload files.\n\nThese two files  **`FileAPI.min.js`, `FileAPI.flash.swf`** will be loaded by the module on demand (no need to be included in the html) if the browser does not supports HTML5 FormData to avoid extra load for HTML5 browsers.\nYou can place these two files beside `angular-file-upload-shim(.min).js` on your server to be loaded automatically from the same path or you can specify the path to those files if they are in a different path using the following script:\n```html\n<script>\n    //optional need to be loaded before angular-file-upload-shim(.min).js\n    FileAPI = {\n        //only one of jsPath or jsUrl.\n        jsPath: '/js/FileAPI.min.js/folder/', \n        jsUrl: 'yourcdn.com/js/FileAPI.min.js',\n        \n        //only one of staticPath or flashUrl.\n        staticPath: '/flash/FileAPI.flash.swf/folder/',\n        flashUrl: 'yourcdn.com/js/FileAPI.flash.swf',\n\n        //forceLoad: true, html5: false //to debug flash in HTML5 browsers\n        //noContentTimeout: 10000 (see #528)\n    }\n</script>\n<script src=\"angular-file-upload-shim.min.js\"></script>...\n```\n**Old browsers known issues**: \n* Because of a Flash limitation/bug if the server doesn't send any response body the status code of the response will be always `204 'No Content'`. So if you have access to your server upload code at least return a character in the response for the status code to work properly.\n* Custom headers will not work due to a Flash limitation [#111](https://github.com/danialfarid/ng-file-upload/issues/111) [#224](https://github.com/danialfarid/ng-file-upload/issues/224) [#129](https://github.com/danialfarid/ng-file-upload/issues/129)\n* Due to Flash bug [#92](https://github.com/danialfarid/ng-file-upload/issues/92) Server HTTP error code 400 will be returned as 200 to the client. So avoid returning 400 on your server side for upload response otherwise it will be treated as a success response on the client side.\n* In case of an error response (http code >= 400) the custom error message returned from the server may not be available. For some error codes flash just provide a generic error message and ignores the response text. [#310](https://github.com/danialfarid/ng-file-upload/issues/310)\n* Older browsers won't allow `PUT` requests. [#261](https://github.com/danialfarid/ng-file-upload/issues/261)\n\n##<a name=\"server\"></a>Server Side\n\n* <a name=\"java\"></a>**Java**\nYou can find the sample server code in Java/GAE [here](https://github.com/danialfarid/ng-file-upload/blob/master/demo/src/com/df/angularfileupload/)\n* <a name=\"spring\"></a>**Spring MVC**\n[Wiki Sample](https://github.com/danialfarid/ng-file-upload/wiki/spring-mvc-example) provided by [zouroto](https://github.com/zouroto)\n* <a name=\"node\"></a>**Node.js** \n[Wiki Sample](https://github.com/danialfarid/ng-file-upload/wiki/node.js-example) provided by [chovy](https://github.com/chovy).\n[Another wiki](https://github.com/danialfarid/ng-file-upload/wiki/Node-example) using Express 4.0 and the Multiparty provided by [Jonathan White](https://github.com/JonathanZWhite)\n* <a name=\"rails\"></a>**Rails**\n  * [Wiki Sample](https://github.com/danialfarid/ng-file-upload/wiki/Rails-Example) provided by [guptapriyank](https://github.com/guptapriyank). \n  * [Blog post](http://www.coshx.com/blog/2015/07/10/file-attachments-in-angular/)\nprovided by [Coshx Labs](http://www.coshx.com/).\n  * **Rails progress event**: If your server is Rails and Apache you may need to modify server configurations for the server to support upload progress. See [#207](https://github.com/danialfarid/ng-file-upload/issues/207)\n* <a name=\"php\"></a>**PHP**\n[Wiki Sample] (https://github.com/danialfarid/ng-file-upload/wiki/PHP-Example) and related issue [only one file in $_FILES when uploading multiple files] (https://github.com/danialfarid/ng-file-upload/issues/475)\n* <a name=\"net\"></a>**.Net**\nSample client and server code [demo/C#] (https://github.com/danialfarid/ng-file-upload/tree/master/demo/C%23) provided by [AtomStar](https://github.com/AtomStar)\n\n##<a name=\"cors\"></a>CORS\nTo support CORS upload your server needs to allow cross domain requests. You can achive that by having a filter or interceptor on your upload file server to add CORS headers to the response similar to this:\n([sample java code](https://github.com/danialfarid/ng-file-upload/blob/master/demo/src/com/df/angularfileupload/CORSFilter.java))\n```java\nhttpResp.setHeader(\"Access-Control-Allow-Methods\", \"POST, PUT, OPTIONS\");\nhttpResp.setHeader(\"Access-Control-Allow-Origin\", \"your.other.server.com\");\nhttpResp.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\"));\n```\nFor non-HTML5 IE8-9 browsers you would also need a `crossdomain.xml` file at the root of your server to allow CORS for flash:\n<a name=\"crossdomain\"></a>([sample xml](https://angular-file-upload.appspot.com/crossdomain.xml))\n```xml\n<cross-domain-policy>\n  <site-control permitted-cross-domain-policies=\"all\"/>\n  <allow-access-from domain=\"angular-file-upload.appspot.com\"/>\n  <allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\"/>\n</cross-domain-policy>\n```\n\n#### <a name=\"s3\"></a>Amazon AWS S3 Upload\nThe <a href=\"https://angular-file-upload.appspot.com/\" target=\"_blank\">demo</a> page has an option to upload to S3.\nHere is a sample config options:\n```\nUpload.upload({\n        url: 'https://angular-file-upload.s3.amazonaws.com/', //S3 upload url including bucket name\n        method: 'POST',\n        fields : {\n          key: file.name, // the key to store the file on S3, could be file name or customized\n          AWSAccessKeyId: <YOUR AWS AccessKey Id>, \n          acl: 'private', // sets the access to the uploaded file in the bucket: private or public \n          policy: $scope.policy, // base64-encoded json policy (see article below)\n          signature: $scope.signature, // base64-encoded signature based on policy string (see article below)\n          \"Content-Type\": file.type != '' ? file.type : 'application/octet-stream', // content type of the file (NotEmpty)\n          filename: file.name // this is needed for Flash polyfill IE8-9\n        },\n        file: file,\n      });\n```\n[This article](http://aws.amazon.com/articles/1434/) explains more about these fields and provides instructions on how to generate the policy and signature using a server side tool.\nThese two values are generated from the json policy document which looks like this:\n```\n{\"expiration\": \"2020-01-01T00:00:00Z\",\n\"conditions\": [ \n  {\"bucket\": \"angular-file-upload\"}, \n  [\"starts-with\", \"$key\", \"\"],\n  {\"acl\": \"private\"},\n  [\"starts-with\", \"$Content-Type\", \"\"],\n  [\"starts-with\", \"$filename\", \"\"],\n  [\"content-length-range\", 0, 524288000]\n]\n}\n```\nThe [demo](https://angular-file-upload.appspot.com/) page provide a helper tool to generate the policy and signature from you from the json policy document. **Note**: Please use https protocol to access demo page if you are using this tool to generate signature and policy to protect your aws secret key which should never be shared.\n\nMake sure that you provide upload and CORS post to your bucket at AWS -> S3 -> bucket name -> Properties -> Edit bucket policy and Edit CORS Configuration. Samples of these two files:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"UploadFile\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::xxxx:user/xxx\"\n      },\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::angular-file-upload/*\"\n    },\n    {\n      \"Sid\": \"crossdomainAccess\",\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::angular-file-upload/crossdomain.xml\"\n    }\n  ]\n}\n```\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n    <CORSRule>\n        <AllowedOrigin>http://angular-file-upload.appspot.com</AllowedOrigin>\n        <AllowedMethod>POST</AllowedMethod>\n        <AllowedMethod>GET</AllowedMethod>\n        <AllowedMethod>HEAD</AllowedMethod>\n        <MaxAgeSeconds>3000</MaxAgeSeconds>\n        <AllowedHeader>*</AllowedHeader>\n    </CORSRule>\n</CORSConfiguration>\n```\n\nFor IE8-9 flash polyfill you need to have a <a href='#crossdomain'>crossdomain.xml</a> file at the root of you S3 bucket. Make sure the content-type of crossdomain.xml is text/xml and you provide read access to this file in your bucket policy.\n\n\nYou can also have a look at [https://github.com/nukulb/s3-angular-file-upload](https://github.com/nukulb/s3-angular-file-upload) for another example with [this](https://github.com/danialfarid/ng-file-upload/issues/814#issuecomment-112198426) fix.\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "ng-file-upload@7.0.10",
  "dist": {
    "shasum": "13e4c9ed76bf7be30ea94e666571b9a3233b0c05"
  },
  "_from": "ng-file-upload@",
  "_resolved": "https://registry.npmjs.org/ng-file-upload/-/ng-file-upload-7.0.10.tgz"
}
